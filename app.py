# -*- coding: utf-8 -*-
"""Dasbhoard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EFENrusl28kBOCFMdUJHbCKlxTNIBgnA
"""

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import dash
from dash import Dash, html, dcc
import dash_bootstrap_components as dbc

clin_trials = pd.read_csv(r"clin_trials.csv")
clin_trials.head()

"------------------------------------------------------------------------------------"
"""Color Palette"""
cp = ['#F79256', '#FBD1A2', '#7DCFB6', '#00B2CA', '#1D4E89']

"""# Graphs"""

"SCATTER PLOT"
# create a pivot table based on sponsor and start date
trialcounts_df = clin_trials.groupby(['Sponsor', 'Start_Date']).size().reset_index(name = 'Count')
trialcounts_df = trialcounts_df.pivot_table(index = 'Sponsor', columns = 'Start_Date', values = 'Count', fill_value = 0)

# add an entry to the table with total trials per start date
trials_pertime = clin_trials['Start_Date'].value_counts()
trials_pertimedf = pd.DataFrame(trials_pertime).T
trialcounts_df = pd.concat([trialcounts_df, trials_pertimedf], ignore_index= False)
trialcounts_df.index.values[-1] = 'Total Trials'

# create dataframe for plotting total trials vs time
total_trials = trialcounts_df.loc['Total Trials'].T
total_trials

#creating the figure
scatter = px.scatter(data_frame = total_trials,
#                   title = '<b>Clinical Trials Per Year from 1984 - 2020<b>',
                  labels = {'index':'Start Date', 'value': 'Number of Trials'},
                  color_discrete_sequence = [cp[2]]
                  )

scatter.update_layout(title_x = .5,
                   title_y = .9,
                   font = dict(size = 14),
                   margin = dict(l = 5, r = 5, t = 5, b = 5),
                   plot_bgcolor = 'white'
                   )
scatter.update(layout_showlegend = False)
scatter.update_layout(font = dict(family = 'Gabarito', size = 18))

"DONUT CHART"
# place all halted trials in their own dataframe
halt_df = clin_trials[clin_trials['Status'].isin(['Withdrawn', 'Terminated', 'Suspended'])]

# calculate share of total trials that are halted
halt_share = len(halt_df) / len(clin_trials)
nonhalt_share = (1 - halt_share)

# create a donut chart to visualize share of halted trials against overall
pie = go.Figure(go.Pie(labels = ['Halted', 'Other'],
                       values = [halt_share, nonhalt_share],
                       hole = 0.4,
#                        title = dict(text = '<b> Title <b>',
#                                     position = 'top left'),
                       showlegend = False,
                       opacity = 0.8,
                       pull = [0, 0.2],
                       rotation = 90,
                       text = ['Halted', 'All<br>other'],
                       textposition = 'outside',
                       
                       #textfont = dict()
                      ))
pie.update_layout(
    margin = dict(l = 0, r = 0, t = 0, b = 0))
pie.update_traces(marker = dict(colors = [cp[3], cp[1]]))

pie.update_layout(font = dict(family = 'Gabarito', size = 16))

"WAFFLE CHART"
dfs = []
halt_pct = pd.DataFrame(columns = ['Status', 'Count',
                                    'pct'
                                  ])
for status in halt_df['Status'].unique():
    filter_df = halt_df[halt_df['Status'] == status]
    data = {
        'Status' : status,
        'Count' : len(filter_df),
         'pct' : (len(filter_df) / len(halt_df))
    }

    df = pd.DataFrame([data])
    dfs.append(df)

halt_pct = pd.concat(dfs, ignore_index = True).sort_values(by = 'Count', ascending = False)
halt_pct.index = halt_pct['Status']
halt_pct = halt_pct.drop(columns = ['Status'])

# setting up the size of the waffle chart
r = 10
c = 10
total_tiles = r * c
tiles_per_cat = (halt_pct['pct'] * total_tiles).round().astype(int)

# creating a waffle chart matrix with proportion of statuses equal to frequency in matrix
waffle_matrix = np.zeros((r, c), dtype = np.uint)
category_index = 0
tile_index = 0

for col in range(c):
    for row in range(r):
        tile_index += 1

        if tile_index > sum(tiles_per_cat[0:category_index]):
            category_index += 1

        waffle_matrix[row, col] = category_index
matrix_d = {1: 'Terminated',
            2: 'Withdrawn',
            3: 'Suspended'
           }

# creating 3 new matrices for ease of plotting
tMatrix = np.where(waffle_matrix == 1, 1, None)
wMatrix = np.where(waffle_matrix == 2, 1, None)
sMatrix = np.where(waffle_matrix == 3, 1, None)

# creating the figure
waf = go.Figure(go.Heatmap(xgap = 3,
                           ygap = 3))
waf.add_trace(go.Heatmap(z = tMatrix,
                          xgap = 3,
                          ygap = 3,
                          name = 'Terminated (80.7%)',
                          colorscale = [(0.00, cp[0]), (1.0, cp[0])],
                          showscale = False,
                          showlegend = True
                          ))

waf.add_trace(go.Heatmap(z = wMatrix,
                          xgap = 3,
                          ygap = 3,
                          name = 'Withdrawn (18.3%)',
                          colorscale = [(0.00, cp[1]), (1.0, cp[1])],
                          showscale = False,
                          showlegend = True
                          ))

waf.add_trace(go.Heatmap(z = sMatrix,
                          xgap = 3,
                          ygap = 3,
                          name = 'Suspended (1.0%)',
                          colorscale = [(0.00, cp[2]), (1.0, cp[2])],
                          showscale = False,
                          showlegend = True
                          ))

waf.update_layout(
#                    title = dict(text = '<b>Halted Trial Types<b>'),
                   title_x = .5,
                   title_y = .95,
                   font = dict(size = 16),
                   margin = dict(l = 5, r = 5, t = 5, b = 5),
                   legend = dict(orientation = 'v',
                                 # itemwidth = 150,
                                 # yanchor = 'center',
                                 # y = -.1,
                                 # xanchor = 'right',
                                 # x = -.02,
                                 font = dict(size = 14),
                              )
                  )
waf.update_layout(font = dict(family = 'Gabarito', size = 16))

waf.update_yaxes(showticklabels = False)
waf.update_xaxes(showticklabels = False)


"BAR CHART 1 - TOTAL VS HALTED TRIALS"
# share of all halted trials by sponsor
haltsp_df = pd.DataFrame()
halted_counts = halt_df.groupby('Sponsor').size().reset_index(name = 'Halted')
total_counts = clin_trials.groupby('Sponsor').size().reset_index(name = 'Total')
haltsp_df = pd.merge(halted_counts, total_counts, on='Sponsor', how = 'outer')
haltsp_df.fillna(0, inplace=True)
haltsp_df['Percent'] = (haltsp_df['Halted']/haltsp_df['Total']).map('{:.2%}'.format)

# create the dataframe of top 10 conditions
bar1_df = haltsp_df.sort_values(by = 'Total', ascending = False).head(10)

# create the dict for text annotations
xi = bar1_df['Sponsor']
yi = bar1_df['Halted']
annoText = bar1_df['Percent']
annotationsDict = [dict(
    x = xcoord,
    y = ycoord + 80,
    text = annoText,
    showarrow = False,
) for xcoord, ycoord, annoText in zip(xi, yi, annoText)]

# create the bar chart
bar1 = go.Figure()
bar1.add_trace(go.Bar(name = 'Halted Trials',
                     x = bar1_df['Sponsor'],
                     y = bar1_df['Halted'],
                     marker = dict(color = cp[3]),
                    ))
bar1.add_trace(go.Bar(name = 'Total Trials',
                     x = bar1_df['Sponsor'],
                     y = bar1_df['Total'],
                     marker = dict(color = '#bbe9f0'),
                    ))

bar1.update_layout(
                  barmode = 'stack',
                  yaxis_title = 'Number of Trials',
                  width = 1000,
                  height = 1000,
                  margin = dict(l = 0, r = 0, t = 0, b = 0, pad = 0),
                  legend = dict(
                      orientation = 'h',
                      yanchor = 'bottom',
                      y = -.2,
                      xanchor = 'center',
                      x= .5),
                  xaxis = dict(ticktext = ['test']),
                  plot_bgcolor = 'white',
                  annotations = annotationsDict
                 )
bar1.update_layout(font = dict(family = 'Gabarito', size = 15))

"BAR CHART 2 - TOTAL VS HALTED TOP 10 CONDITIONS"

# create the dataframe for plotting
halt_cond = pd.DataFrame()
halted_counts = halt_df.groupby('Condition').size().reset_index(name = 'Halted')
total_counts = clin_trials.groupby('Condition').size().reset_index(name = 'Total')
halt_cond = pd.merge(halted_counts, total_counts, on='Condition', how = 'outer')
halt_cond.fillna(0, inplace=True)
halt_cond['Percent'] = (halt_cond['Halted']/halt_cond['Total']).map('{:.2%}'.format)

# create the dataframe of top 10 conditions
bar2_df = halt_cond.sort_values(by = 'Total', ascending = False).head(10)

# create the dict for text annotations
xi = bar2_df['Condition']
yi = bar2_df['Halted']
annoText = bar2_df['Percent']
annotationsDict = [dict(
    x = xcoord,
    y = ycoord + 20,
    text = annoText,
    showarrow = False,
) for xcoord, ycoord, annoText in zip(xi, yi, annoText)]


bar2 = go.Figure()
bar2.add_trace(go.Bar(name = 'Halted Trials', 
                     x = bar2_df['Condition'],
                     y = bar2_df['Halted'],
                     marker = dict(color = cp[0]),
                    ))
bar2.add_trace(go.Bar(name = 'Total Trials', 
                     x = bar2_df['Condition'],
                     y = bar2_df['Total'],
                     marker = dict(color = 'rgb(251, 209, 162)'),
                    ))

bar2.update_layout(barmode = 'stack',
                  yaxis_title = 'Number of Trials',
                  width = 1000,
                  height = 1000,
                  margin = dict(l = 0, r = 0, t = 0, b = 0, pad = 0),
                  legend = dict(
                      orientation = 'h',
                      yanchor = 'bottom',
                      y = -.3,
                      xanchor = 'center',
                      x= .5),
                   annotations = annotationsDict,
                   plot_bgcolor = 'white'
                  )

bar2.update_xaxes(tickmode = 'array',
                  tickangle = 0,
                  tickvals = list(range(10)),
                  ticktext = ['Diabetes<br>Mellitus,<br>Type 2', 
                              'Breast<br>Neoplasms', 
                              'Pulmonary<br>Disease,<br>Chronic Obstructive', 
                              'Hypertension', 
                              'Asthma', 
                              'Arthritis,<br>Rheumatoid', 
                              'Influenza,<br>Human', 
                              'Schizophrenia', 
                              'Diabetes<br>Mellitus', 
                              'Alzheimer<br>Disease']
                 )

bar2.show()
bar2.update_layout(font = dict(family = 'Gabarito', size = 15))

"----------------------------------------------------------------------------------"
"""# Create Dashboard"""

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)

app.layout = html.Div([
        # for the title
        html.Div([
            html.Div([html.H1('Clinical Trials Dashboard')], className = 'ten columns', id = 'title'),
            html.Div([html.H3('Data from Aero Data Lab\u00B9')], className = 'two columns', id = 'credit')
        ], className = 'row', id = 'title-row'),
        
        #for the top row
        html.Div([
            # top half description
            html.Div([
                dbc.Card([dbc.CardBody([html.P('An analysis of clinical trials with a status of withdrawn, suspended, or terminated —  here referred to as halted trials — to investigate a pattern of which trials were historically most halted.', className = 'card-text')])], className = 'row', id = 'desc-card'),
            ], 
                className = 'nine columns', 
                id = 'desc-div'),            
            html.Div([
                dbc.Card([dbc.CardBody([html.H4('1984 - 2020', className = 'card-title')])], className = 'four columns', id = 'years-card'),
                dbc.Card([dbc.CardBody([html.H4('10 sponsors', className = 'card-title')])], className = 'four columns', id = 'sponsors-card'),      
                dbc.Card([dbc.CardBody([html.H4('13,748 trials', className = 'card-title')])], className = 'four columns', id = 'trials-card'),                              
            ], 
                className = 'three columns', 
                id = 'card-div'),
        ], className = 'row', id = 'top-row'),
        
        #for the entire middle row
        html.Div([
            #left half
            html.Div([
                # pie chart
                html.Div([
                    html.H4('Share of halted trials'),
                    dcc.Graph(figure = pie, responsive = True, id = 'pie'),
                ], className = 'six columns', id = 'pie-div'),
                # waffle chart
                html.Div([
                    html.H4('Halted trials by status'),
                    dcc.Graph(figure = waf, responsive = True, id = 'waf')
                ], className = 'six columns', id = 'waffle-div'),
            ], className = 'six columns', id = 'mid-left'),       
            #right half
            html.Div([
                html.Div([
                    html.H4('Total trial volume'),
                    dcc.Graph(figure = scatter, responsive = True, id = 'scatter'),
                ], className = 'row', id = 'scatter-div')                
            ], className = 'six columns', id = 'mid-right')
        ], className = 'row', id = 'mid-row'),
    
        #for entire bottom row
        html.Div([
            html.Div([
                html.H4('Halted trials by sponsor'),
                dcc.Graph(figure = bar1, responsive = True, id = 'bar1'),
            ], className = 'six columns', id = 'bottom-left'),
    
            html.Div([
                html.H4('Halted trials for the top 10 conditions'),
                dcc.Graph(figure = bar2, responsive = True, id = 'bar2'),
            ], className = 'six columns', id = 'bottom-right'),
        ], className = 'row', id = 'bot-row'),
        
        #for the citation row
        html.Div([
            html.H5('\u00B9Hey, Spencer, 2019, "Data for "A Bird’s Eye View of Pharmaceutical Research and Development"", \
                              https://doi.org/10.7910/DVN/S8C77Q, Harvard Dataverse, V1, UNF:6:xsVhMaTHu37CH2L9bPIuGw== [fileUNF]')
        ], className = 'row', id = 'citation-div')
], id='whole-div')


if __name__ == '__main__':
    app.run(debug=True, jupyter_mode = 'external')

